package in.pickright.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import in.pickright.constants.UserApiConstants;
import in.pickright.constants.UserCommonMessages;
import in.pickright.dto.ApiResponse;
import in.pickright.dto.UserRequest;
import in.pickright.dto.UserResponse;
import in.pickright.service.UserService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.parameters.RequestBody;
import lombok.extern.slf4j.Slf4j;

@RestController
@RequestMapping(path = UserApiConstants.USER_REQUEST_MAPPING)
@Slf4j
public class UserController {

	@Autowired
	private UserService userService;
	
	@Operation(summary = "Used to check Service is up or not.")
	@GetMapping("/up")
	public ResponseEntity<?> isUp(){
		return new ResponseEntity<ApiResponse<String>>(new ApiResponse<String>(HttpStatus.OK.name(), String.valueOf(HttpStatus.OK.value()), "User Service is running."), HttpStatus.OK);
	}
	
	@Operation(summary = "This api is used to register new users.")
	@PostMapping(UserApiConstants.REGISTER_USER)
	public ResponseEntity<?> register(@RequestBody UserRequest request){
		log.info("Request recieved into register api with {} "+request);
		try {
			return new ResponseEntity<ApiResponse<UserResponse>>(new ApiResponse<UserResponse>(HttpStatus.CREATED.name(), String.valueOf(HttpStatus.CREATED.value()), userService.registerUser(request)), HttpStatus.OK);
		} catch (Exception e) {
			log.info("Problem occurred : {}",e.getMessage());
			return new ResponseEntity<ApiResponse<String>>(new ApiResponse<String>(HttpStatus.INTERNAL_SERVER_ERROR.name(), String.valueOf(HttpStatus.INTERNAL_SERVER_ERROR.value()),null), HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@Operation(summary = "This api is used to get user by provided id.")
	@PostMapping(path = UserApiConstants.GET_USER_BY_ID)
	public ResponseEntity<?> getUserById(@RequestParam("userId") String id){
		log.info("Request recieved into register api with {} "+id);
		try {
			return new ResponseEntity<ApiResponse<UserResponse>>(new ApiResponse<UserResponse>(HttpStatus.OK.name(), String.valueOf(HttpStatus.OK.value()), userService.getUserById(id)), HttpStatus.OK);
		} catch (Exception e) {
			log.info("Problem occurred : {}",e.getMessage());
			return new ResponseEntity<ApiResponse<String>>(new ApiResponse<String>(HttpStatus.INTERNAL_SERVER_ERROR.name(), String.valueOf(HttpStatus.INTERNAL_SERVER_ERROR.value()),e.getMessage()), HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@Operation(summary = "This api is used to get user by provided id.")
	@PostMapping(path = UserApiConstants.DELETE_USER_BY_ID)
	public ResponseEntity<?> deleteUserById(@RequestParam("userId") String id){
		log.info("Request recieved into register api with {} "+id);
		try {
			userService.deleteUserById(id);
			return new ResponseEntity<ApiResponse<String>>(new ApiResponse<String>(HttpStatus.OK.name(), String.valueOf(HttpStatus.OK.value()), UserCommonMessages.DELETED_SUCCESSFULLY), HttpStatus.OK);
		} catch (Exception e) {
			log.info("Problem occurred : {}",e.getMessage());
			return new ResponseEntity<ApiResponse<String>>(new ApiResponse<String>(HttpStatus.INTERNAL_SERVER_ERROR.name(), String.valueOf(HttpStatus.INTERNAL_SERVER_ERROR.value()),e.getMessage()), HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
}
