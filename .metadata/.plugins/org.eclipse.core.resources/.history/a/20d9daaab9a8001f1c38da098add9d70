package in.pickright.service.impl;

import static in.pickright.helper.UserFieldValidation.validateFields;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import in.pickright.constants.UserCommonMessages;
import in.pickright.dto.UserRequest;
import in.pickright.dto.UserResponse;
import in.pickright.entity.User;
import in.pickright.mapper.UserMapper;
import in.pickright.respository.UserRepository;
import in.pickright.service.UserService;
import in.pickright.utils.PasswordUtils;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class UserServiceImpl implements UserService {

	@Autowired
	private UserRepository userRepository;

	@Override
	public UserResponse registerUser(UserRequest request) {
		log.info("Request recieved into user service.");
		validateFields(request);
		log.info("Request fields are validated.");
		isAlreadyRegistered(request);
		log.info("Requested user is new user.");
		User user = UserMapper.convertUserReqToUser(request);
		log.info("Request converted to User.");
		User savedUser = userRepository.save(user);
		log.info("User registered succesfully.");
		return UserMapper.convertUserToUserRes(savedUser);
	}
	
	@Override
	public UserResponse loginUser(String emailOrMobile, String password) {
		log.info("Request recieved into user service.");
		if (emailOrMobile==null || emailOrMobile.isEmpty()) {
			log.error(UserCommonMessages.EMAIL_OR_MOBILE_NO_REQUIRED);
			throw new RuntimeException(UserCommonMessages.EMAIL_OR_MOBILE_NO_REQUIRED);
		}
		if (password==null || password.isEmpty()) {
			log.error(UserCommonMessages.PASSWORD_REQUIRED);
			throw new RuntimeException(UserCommonMessages.PASSWORD_REQUIRED);
		}
		if (Boolean.FALSE.equals(userRepository.existsByEmailOrMobileNoAndIsDeletedFalseAndIsActiveTrue(emailOrMobile))) {
			log.error(UserCommonMessages.NOT_REGISTERED);
			throw new RuntimeException(UserCommonMessages.NOT_REGISTERED);
		}
		String encodePassword = PasswordUtils.encodePassword(password);
		userRepository.findByEmailOrMobileAndPasswordAndIsDeletedFalseAndIsActiveTrue(emailOrMobile,encodePassword))) {
			log.error(UserCommonMessages.NOT_REGISTERED);
			throw new RuntimeException(UserCommonMessages.NOT_REGISTERED);
		}

		
		return null;
	}

	private void isAlreadyRegistered(UserRequest request) {
		log.info("Request recieved into user service.");
		if (Boolean.TRUE.equals(userRepository.existsByEmailAndIsDeletedFalseAndIsActiveTrue(request.getEmail()))) {
			log.error("{} is already registered",request.getEmail());
			throw new RuntimeException("Email is " + UserCommonMessages.ALREADY_REGISTERED);
		}

		if (Boolean.TRUE
				.equals(userRepository.existsByMobileNoAndIsDeletedFalseAndIsActiveTrue(request.getMobileNo()))) {
			log.error("{} is already registered",request.getMobileNo());
			throw new RuntimeException("Mobile number is " + UserCommonMessages.ALREADY_REGISTERED);
		}

	}

	@Override
	public UserResponse getUserByEmailOrMobileNoAndPassword(String emailOrMobileNo, String password) {
		log.info("Request recieved into user service.");
		String encodePassword = PasswordUtils.encodePassword(password);
		User user = userRepository.findByEmailOrMobileAndPassword(emailOrMobileNo, encodePassword)
				.orElseThrow(() -> new RuntimeException(UserCommonMessages.NOT_FOUND));
		return UserMapper.convertUserToUserRes(user);
	}

	@Override
	public UserResponse getUserById(String id) {
		log.info("Request recieved into user service.");
		User user = userRepository.findById(id).orElseThrow(() -> new RuntimeException(UserCommonMessages.NOT_FOUND));
		return UserMapper.convertUserToUserRes(user);
	}
	
	@Override
	public void deleteUserById(String id) {
		log.info("Request recieved into user service.");
		User user = userRepository.findByIdAndIsDeletedFalseAndIsActiveTrue(id)
				.orElseThrow(()->new RuntimeException(UserCommonMessages.NOT_FOUND+" or "+UserCommonMessages.ALREADY_DELETED));
		user.setIsDeleted(Boolean.TRUE);
		User deletedUser = userRepository.save(user);
		log.info("User assosiated with {} deleted succesfully", deletedUser.getEmail());
	}

	@Override
	public void activeInactiveUserById(String id) {
		log.info("Request recieved into user service.");
		User user = userRepository.findByIdAndIsDeletedFalse(id).orElseThrow(()->new RuntimeException(UserCommonMessages.NOT_FOUND));
		if (Boolean.TRUE.equals(user.getIsActive())) {
			user.setIsActive(Boolean.FALSE);	
			log.info("User deactivated successfully.");
		}
		else {
			user.setIsActive(Boolean.TRUE);
		userRepository.save(user);
		log.info("User activated successfully.");
		}
	}

}
